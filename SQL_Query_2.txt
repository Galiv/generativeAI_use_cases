I have SQL Server db on Azure Portal. I need to write a T-SQL query to retreive product sales revenue and quantity growth rates, calculated as the percentage change in sales revenue and quantity from the previous quarter and year

Please design SQL query which performs the necessary data transformations and calculations. The query should return a data set which consists of following columns: [ProductName], [GrowthRevenueRate], [GrowthQuantityRate], [CurrentQuarter], [CurrentYear], [PreviousQuarter], [PreviousYear] 

ProductName comes as an alias  from table Dimension.StockItem column [Stock Item]. Dimension.StockItem table has a primary key [Stock Item Key]

[GrowthRevenueRate] should come from Fact.Sale table column Profit.

[GrowthQuantityRate] should come from Fact.Sale table column Quantity.

[CurrentQuarter], [CurrentYear], [PreviousQuarter], [PreviousYear] should extract the value from Fact.Sale table date column named [Invoice Date Key].

Dimension.StockItem and Fact Sale should be joined via inner join

ChatGPT
To achieve the results that you want, we need to construct a SQL query that calculates the growth rate between quarters and years based on sales revenue and quantity.

The growth rates are calculated as ((current period - previous period) / previous period) * 100.

Below is a sample query for your requirement:

sql
Copy code
WITH QuarterlySales AS (
SELECT 
    DI.[Stock Item] AS ProductName,
    SUM(FS.Profit) AS Revenue,
    SUM(FS.Quantity) AS Quantity,
    DATEPART(QUARTER, FS.[Invoice Date Key]) AS Quarter,
    DATEPART(YEAR, FS.[Invoice Date Key]) AS Year
FROM 
    Fact.Sale FS
    INNER JOIN Dimension.StockItem DI 
        ON FS.[Stock Item Key] = DI.[Stock Item Key]
GROUP BY 
    DI.[Stock Item],
    DATEPART(QUARTER, FS.[Invoice Date Key]),
    DATEPART(YEAR, FS.[Invoice Date Key])
),
GrowthRates AS (
SELECT 
    QS.ProductName,
    QS.Revenue,
    QS.Quantity,
    QS.Quarter AS CurrentQuarter,
    QS.Year AS CurrentYear,
    LAG(QS.Revenue, 1) OVER (PARTITION BY QS.ProductName ORDER BY QS.Year, QS.Quarter) AS PreviousRevenue,
    LAG(QS.Quantity, 1) OVER (PARTITION BY QS.ProductName ORDER BY QS.Year, QS.Quarter) AS PreviousQuantity,
    LAG(QS.Quarter, 1) OVER (PARTITION BY QS.ProductName ORDER BY QS.Year, QS.Quarter) AS PreviousQuarter,
    LAG(QS.Year, 1) OVER (PARTITION BY QS.ProductName ORDER BY QS.Year, QS.Quarter) AS PreviousYear
FROM 
    QuarterlySales QS
)
SELECT 
    GR.ProductName,
    ((GR.Revenue - GR.PreviousRevenue) / NULLIF(GR.PreviousRevenue, 0)) * 100 AS GrowthRevenueRate,
    ((GR.Quantity - GR.PreviousQuantity) / NULLIF(GR.PreviousQuantity, 0)) * 100 AS GrowthQuantityRate,
    GR.CurrentQuarter,
    GR.CurrentYear,
    GR.PreviousQuarter,
    GR.PreviousYear
FROM 
    GrowthRates GR
ORDER BY 
    GR.ProductName, 
    GR.CurrentYear, 
    GR.CurrentQuarter;
This query does the following:

It uses the WITH statement to create a CTE (Common Table Expression) which aggregates the data by product name, quarter, and year.
Then it creates another CTE named GrowthRates which fetches the current quarter and year data, and uses the LAG function to get the previous quarter and year data.
Finally, it calculates the growth rates and returns the required fields.
Remember to replace table names, columns, and alias as per your exact database schema.

Please be careful with dividing by zero when calculating the growth rates, as this will cause an error. NULLIF is used to avoid this, by turning any zero denominators into NULL. When dividing by NULL, the result is NULL, which is generally preferable to an error.





User
Is there a way to optimize the query so that we do not use the CTE and just lag function?

ChatGPT
Yes, you can write a single SQL query without using a CTE (Common Table Expression) by using subqueries instead. The LAG function can be directly used in the main query. Here's an example of how you could rewrite your SQL query:

sql
Copy code
SELECT 
    ProductName,
    ((Revenue - PreviousRevenue) / NULLIF(PreviousRevenue, 0)) * 100 AS GrowthRevenueRate,
    ((Quantity - PreviousQuantity) / NULLIF(PreviousQuantity, 0)) * 100 AS GrowthQuantityRate,
    CurrentQuarter,
    CurrentYear,
    PreviousQuarter,
    PreviousYear
FROM 
    (SELECT 
        DI.[Stock Item] AS ProductName,
        SUM(FS.Profit) AS Revenue,
        SUM(FS.Quantity) AS Quantity,
        DATEPART(QUARTER, FS.[Invoice Date Key]) AS CurrentQuarter,
        DATEPART(YEAR, FS.[Invoice Date Key]) AS CurrentYear,
        LAG(SUM(FS.Profit), 1) OVER (PARTITION BY DI.[Stock Item] ORDER BY DATEPART(YEAR, FS.[Invoice Date Key]), DATEPART(QUARTER, FS.[Invoice Date Key])) AS PreviousRevenue,
        LAG(SUM(FS.Quantity), 1) OVER (PARTITION BY DI.[Stock Item] ORDER BY DATEPART(YEAR, FS.[Invoice Date Key]), DATEPART(QUARTER, FS.[Invoice Date Key])) AS PreviousQuantity,
        LAG(DATEPART(QUARTER, FS.[Invoice Date Key]), 1) OVER (PARTITION BY DI.[Stock Item] ORDER BY DATEPART(YEAR, FS.[Invoice Date Key]), DATEPART(QUARTER, FS.[Invoice Date Key])) AS PreviousQuarter,
        LAG(DATEPART(YEAR, FS.[Invoice Date Key]), 1) OVER (PARTITION BY DI.[Stock Item] ORDER BY DATEPART(YEAR, FS.[Invoice Date Key]), DATEPART(QUARTER, FS.[Invoice Date Key])) AS PreviousYear
    FROM 
        Fact.Sale FS
        INNER JOIN Dimension.StockItem DI 
            ON FS.[Stock Item Key] = DI.[Stock Item Key]
    GROUP BY 
        DI.[Stock Item],
        DATEPART(QUARTER, FS.[Invoice Date Key]),
        DATEPART(YEAR, FS.[Invoice Date Key])
    ) AS TempTable
ORDER BY 
    ProductName, 
    CurrentYear, 
    CurrentQuarter;
This SQL query does essentially the same job as the previous one but without using CTEs. Instead, it utilizes a subquery in the FROM clause which does the aggregation and calculation of lagged values. The outer query then does the calculation of growth rates. The query should yield the same results as the previous one. It should be noted, however, that this query may not necessarily be more efficient, and the use of CTEs can sometimes help to clarify the structure and logic of the SQL code.





User
If you had to compare the two queries which one do you think would perform better on big datasets?

ChatGPT
The performance of the two queries is likely to be similar, as they do essentially the same operations, just organized differently. SQL Server's query optimizer should be able to handle them in similar ways.

However, depending on the specific data distribution, data statistics, and indexing in your database, one version could be faster than the other.

Common Table Expression (CTE): This query uses CTEs, which can make the query easier to read and maintain, especially if the same subquery needs to be used multiple times in a larger query. However, the CTE version might have to store the intermediate results temporarily before the final computation, which could consume more memory and I/O resources.

Subquery: The subquery version doesn't require storing intermediate results, which can sometimes make it faster. But if the inner query generates a large amount of data, it can be slower than the CTE version.

The best way to know for sure is to run both queries on your actual data and measure the performance. Keep in mind that the total execution time can vary due to many factors, including other loads on the server, so it's best to run each query multiple times and average the results.

In general, for large datasets, the efficiency of your SQL queries can often be improved by using indexes, partitioning, and other database optimization techniques. You should also monitor your database's performance regularly and adjust your strategies as your data grows and changes.





